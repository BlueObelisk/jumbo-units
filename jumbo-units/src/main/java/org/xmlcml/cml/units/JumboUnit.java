package org.xmlcml.cml.units;

import static org.xmlcml.cml.units.UnitConstants.S_COLON;

import java.io.IOException;
import java.io.Writer;
import java.util.HashMap;
import java.util.Map;

import nu.xom.Element;
import nu.xom.Node;

import org.xmlcml.cml.map.NamespaceToUnitListMap;


/**
 * user-modifiable class supporting unit. * autogenerated from schema use as a
 * shell which can be edited
 *
 */
public class JumboUnit extends Element {

	/** namespaced element name.*/
//	public final static String NS = C_E+TAG;

    static String NULL_UNIT_LIST_MAP = "null unitListMap";

//    /** common units in chemistry */
//    public enum Units {
//    	/** mass*/
//    	GRAM			("units:g"),
//    	/** density*/
//    	GRAM_PER_CMCUBED("units:g.cm-3"),
//    	/** molarMass*/
//    	GRAM_PER_MOLE("units:g.mol-1"),
//    	/** volume */
//    	CMCUBED			("units:cm3"),
//    	/** volume */
//    	ML				("units:ml"),
//    	/** volume */
//    	L				("units:l"),
//    	/** amount */
//    	MOL				("units:mol"),
//    	/** amount */
//    	MMOL			("units:mmol"),
//    	;
//        /** dewisott */
//    	public final String value;
//    	private Units(String s) {
//    		value = s;
//    	}
//    	/**
//    	 * @return string
//    	 */
//    	public String toString() {
//    		return value;
//    	}
//    };

//  ========================== amount =========================
    /** */
    public final static JumboUnit MOLE = new JumboUnit(
    		"mol",
    		"mole",
    		"mol",
    		"mol",
    		"mole",
    		null,
    		JumboUnitType.AMOUNT,
    		1.0,
    		0.0
    		);
    /** */
    public final static JumboUnit MMOL = new JumboUnit(
    		"mmol",
    		"millimole",
    		"mmol",
    		"mmol",
    		"millimole",
    		MOLE,
    		JumboUnitType.MASS,
    		0.001 ,
    		0.0
    		);

    /** */
	public final static Map<String, JumboUnit> amountMap;
	static {
		amountMap = new HashMap<String, JumboUnit>();
		amountMap.put("mol", MOLE);
		amountMap.put("mmol", MMOL);
	}
    
//  ========================== density =========================
    /** */
    public final static JumboUnit KGPERM3 = new JumboUnit(
    		"kilogramperm3",
    		"kgperm3",
    		"kgperm3",
    		"kgperm3",
    		"kilogramperm3",
    		null,
    		JumboUnitType.DENSITY,
    		1.0,
    		0.0
    		);
    /** */
    public final static JumboUnit GPERCM3 = new JumboUnit(
    		"grampercmcubed",
    		"gpercm3",
    		"gpercm3",
    		"gpercm3",
    		"grampercmcubed",
    		KGPERM3,
    		JumboUnitType.DENSITY,
    		0.000001 ,
    		0.0
    		);

    /** */
	public final static Map<String, JumboUnit> densityMap;
	static {
		densityMap = new HashMap<String, JumboUnit>();
		densityMap.put("mol", MOLE);
		densityMap.put("mmol", MMOL);
	}
    
//  ========================== mass =========================
    /** */
    public final static JumboUnit KG = new JumboUnit(
    		"kg",
    		"kilogram",
    		"kg",
    		"kg",
    		"kilogram",
    		null,
    		JumboUnitType.MASS,
    		1.0,
    		0.0
    		);
    /** */
    public final static JumboUnit GRAM = new JumboUnit(
    		"g",
    		"gram",
    		"g",
    		"g",
    		"gram",
    		KG,
    		JumboUnitType.MASS,
    		0.001 ,
    		0.0
    		);

    /** */
    public final static JumboUnit MILLIGRAM = new JumboUnit(
    		"mg",
    		"milligram",
    		"mg",
    		"mg",
    		"milligram",
    		KG,
    		JumboUnitType.MASS,
    		0.000001 ,
    		0.0
    		);

    /** */
    public final static JumboUnit MICROGRAM = new JumboUnit(
    		"mug",
    		"microgram",
    		"mug",
    		"mug",
    		"microgram",
    		KG,
    		JumboUnitType.MASS,
    		0.000000001 ,
    		0.0
    		);

    /** */
	public final static Map<String, JumboUnit> massMap;
	static {
		massMap = new HashMap<String, JumboUnit>();
		massMap.put("kg", KG);
		massMap.put("kilogram", KG);
		massMap.put("g", GRAM);
		massMap.put("gram", GRAM);
	}
    
//  ========================== pressure =========================
    /** */
    public final static JumboUnit PASCAL = new JumboUnit(
    		"Pa",
    		"pascal",
    		"Pa",
    		"Pa",
    		"pascal",
    		null,
    		JumboUnitType.PRESSURE,
    		1.0,
    		0.0
    		);
    /** */
    public final static JumboUnit ATMOSPHERE = new JumboUnit(
    		"atm",
    		"atmosphere",
    		"atm",
    		"atm",
    		"atmosphere",
    		PASCAL,
    		JumboUnitType.PRESSURE,
    		101325. ,
    		0.0
    		);
    /** */
    public final static JumboUnit BAR = new JumboUnit(
    		"bar",
    		"bar",
    		"bar",
    		"bar",
    		"bar",
    		PASCAL,
    		JumboUnitType.PRESSURE,
    		100000.,
    		0.0
    		);
    /** */
    public final static JumboUnit UNKNOWN = new JumboUnit(
    		"unk",
    		"unk",
    		"unk",
    		"unk",
    		"unk",
    		null,
    		JumboUnitType.UNKNOWN,
    		1.0,
    		0.0
    		);
    /** */
    	
    /** */
	public final static Map<String, JumboUnit> pressureMap;
	static {
		pressureMap = new HashMap<String, JumboUnit>();
		pressureMap.put("Pa", PASCAL);
		pressureMap.put("pascal", PASCAL);
		pressureMap.put("atm", ATMOSPHERE);
		pressureMap.put("atmosphere", ATMOSPHERE);
		pressureMap.put("bar", BAR);
	}
    		
	// ========================== temperature =========================
    /** */
    public final static JumboUnit KELVIN = new JumboUnit(
    		"k",
    		"Kelvin",
    		"K",
    		"K",
    		"Kelvin",
    		null,
    		JumboUnitType.TEMP,
    		1.0,
    		0.0
    		);
    /** */
    public final static JumboUnit CELSIUS = new JumboUnit(
    		"c",
    		"Celsius",
    		"C",
    		"C",
    		"Celsius",
    		KELVIN,
    		JumboUnitType.TEMP,
    		1.0,
    		273.15
    		);
    
    	
    /** */
	public final static Map<String, JumboUnit> temperatureMap;
	static {
		temperatureMap = new HashMap<String, JumboUnit>();
		temperatureMap.put("k", KELVIN);
		temperatureMap.put("kelvin", KELVIN);
		temperatureMap.put("c", CELSIUS);
		temperatureMap.put("celsius", CELSIUS);
	}
    		
    
//  ========================== time =========================
    /** */
    public final static JumboUnit SECOND = new JumboUnit(
    		"sec",
    		"second",
    		"s",
    		"s",
    		"second",
    		null,
    		JumboUnitType.TIME,
    		1.0,
    		0.0
    		);
    /** */
    public final static JumboUnit MINUTE = new JumboUnit(
    		"min",
    		"minute",
    		"m",
    		"m",
    		"minute",
    		SECOND,
    		JumboUnitType.TIME,
    		60.0,
    		0.0
    		);
    /** */
    public final static JumboUnit HOUR = new JumboUnit(
    		"hour",
    		"hour",
    		"h",
    		"h",
    		"hour",
    		SECOND,
    		JumboUnitType.TIME,
    		3600.0,
    		0.0
    		);
    /** */
    public final static JumboUnit DAY = new JumboUnit(
    		"day",
    		"day",
    		"d",
    		"d",
    		"day",
    		SECOND,
    		JumboUnitType.TIME,
    		86400.0,
    		0.0
    		);
    /** */
    public final static JumboUnit WEEK = new JumboUnit(
    		"week",
    		"week",
    		"wk",
    		"wk",
    		"week",
    		SECOND,
    		JumboUnitType.TIME,
    		604800.0,
    		0.0
    		);
    	
    /** */
	public final static Map<String, JumboUnit> timeMap;
	static {
		timeMap = new HashMap<String, JumboUnit>();
		timeMap.put("s", SECOND);
		timeMap.put("sec", SECOND);
		timeMap.put("second", SECOND);
		timeMap.put("m", MINUTE);
		timeMap.put("min", MINUTE);
		timeMap.put("minute", MINUTE);
		timeMap.put("h", HOUR);
		timeMap.put("hr", HOUR);
		timeMap.put("hour", HOUR);
		timeMap.put("d", DAY);
		timeMap.put("day", DAY);
		timeMap.put("w", WEEK);
		timeMap.put("wk", WEEK);
		timeMap.put("week", WEEK);
	}

//  ========================== pressure =========================
    /** */
    public final static JumboUnit M3 = new JumboUnit(
    		"m3",
    		"metercubed",
    		"m3",
    		"m3",
    		"metercubed",
    		null,
    		JumboUnitType.VOL,
    		1.0,
    		0.0
    		);
    /** */
    public final static JumboUnit CM3 = new JumboUnit(
    		"cm3",
    		"cmcubed",
    		"cm3",
    		"cm3",
    		"cmcubed",
    		PASCAL,
    		JumboUnitType.PRESSURE,
    		101325. ,
    		0.0
    		);
	
//==========================================================    		
    /**
     * can be cached within the unit.
     */
    protected NamespaceToUnitListMap unitListMap = null;

    private JumboUnit parentSI;
    private JumboUnitType unitType;
    private String id;
    private String title;
    private String abbreviation;
    private String symbol;
    private String name;
    private double multiplierToSI;
    private double constantToSI;
    private double power;
    
    public void setPower(double power) {
		this.power = power;
	}

	public JumboUnit getParentSI() {
		return parentSI;
	}

	public void setParentSI(JumboUnit parentSI) {
		this.parentSI = parentSI;
	}

	public JumboUnitType getUnitType() {
		return unitType;
	}

	public void setUnitType(JumboUnitType unitType) {
		this.unitType = unitType;
	}

	/** contructor.
     */
    public JumboUnit() {
    	super("unit");
        this.setParentSI(JumboUnit.UNKNOWN);
        this.setUnitType(JumboUnitType.UNKNOWN);
    }
    
    /** constructor
     * @param id
     * @param title
     * @param abbreviation
     * @param symbol
     * @param name
     * @param parentSI
     * @param unitType
     * @param multiplierToSI
     * @param constantToSI
     */
    JumboUnit(
    	String id,
    	String title,
    	String abbreviation,
    	String symbol,
    	String name,
    	JumboUnit parentSI,
    	JumboUnitType unitType,
    	double multiplierToSI,
    	double constantToSI
    	) {
    	this();
        this.setId(id);
        this.setTitle(title);
        this.setAbbreviation(abbreviation);
        this.setSymbol(symbol);
        this.setName(name);
        this.setParentSI(parentSI);
        this.setUnitType(unitType);
        this.setMultiplierToSI(multiplierToSI);
        this.setConstantToSI(constantToSI);
        }

    /** contructor.
     * use with great care as units should have their unitList parent
     * @param old
     */
    public JumboUnit(JumboUnit old) {
        super(old.getLocalName());
        // FIXME
    }

    /** copy node .
     * use with great care as units should have their unitList parent
     * @return Node
     */
    public Node copy() {
        return new JumboUnit(this);
    }

    /**
     * writes table header for units dictionary as HTML.
     *
     * @param w
     *            writer
     * @throws IOException
     */
    static void writeHTMLTableHeader(Writer w) throws IOException {
        w.write("<tr>" + "<th>id</th>" + "<th>title</th>" + "<th>symbol</th>"
                + "<th>unitType</th>" + "<th>multSI</th>" + "<th>SI.id</th>"
                + "<th>description</th>" + "<th>unitType description</th>"
                + "</tr>\n");
    }

    /**
     * writes units dictionary as HTML.
     *
     * @param w writer
     * @throws IOException
     */
    public void writeHTML(Writer w) throws IOException {

        String unitTypeS = this.getUnitType().getTitle();

        double mult = this.getMultiplierToSI();
        String multS = (mult < 0 || Double.isNaN(mult)) ? "NULL" : "" + mult;

        String parentSIS = dePrefix("" + this.getParentSI());

//        CMLElements<CMLDescription> descriptions = this
//                .getDescriptionElements();
//        CMLDescription description = (descriptions.size() > 0) ? descriptions
//                .get(0) : null;
//        String desc = (description == null) ? "" : description
//                .getStringContent();

        JumboUnitType cmlUnitType = this.getJumboUnitType();
        String cmlUnitTypeS = (cmlUnitType == null) ? null : cmlUnitType
                .getTitle();
        w.write("<tr>" + "<td><b>" + this.getId() + "</b></td>" + "<td><b>"
                + this.getTitle() + "</b></td>" + "<td>" + this.getSymbol()
                + "</td>" + "<td>" + unitTypeS + "</td>" + "<td>" + multS
                + "</td>" + "<td>" + parentSIS + "</td>" + "<td>" /*+ desc*/
                + "</td>" + "<td>" + cmlUnitTypeS + "</td>" + "</tr>\n");
    }

    private String dePrefix(String ss) {
        String s = ss;
        if (ss != null) {
            int idx = ss.indexOf(S_COLON);
            s = ss.substring(idx + 1);
        }
        return s;
    }

    /**
     * gets id. traps missing id and throws runtime.
     *
     * @return id
     *             missing id
     */
    public String getId() {
        return id;
    }

//    /**
//     * gets containing JumboUnitList.
//     *
//     * @return parent unitList
//     * @throws RuntimeException
//     *             does not have a parent list
//     */
//    public JumboUnitList getParentJumboUnitList() {
//        Node parent = this.getParent();
//        JumboUnitList parentUnitList = (parent != null && parent instanceof JumboUnitList) ? (JumboUnitList) parent
//                : null;
//        if (parentUnitList == null) {
//            throw new RuntimeException("unit " + this.getId()
//                    + " must be contained within a unitList");
//        }
//        return (parent instanceof JumboUnitList) ? (JumboUnitList) parent : null;
//    }

    /** get parentSIUnit. requires parent unitList to have an associated
     * unitListMap
     *
     * @return parent SI Unit or null
     */
    public JumboUnit getParentSIUnit() {
        JumboUnit siUnit = null;
        // FIXME
//        NamespaceRefAttribute siUnitAttribute =
//            (NamespaceRefAttribute) this.getParentSIAttribute();
//        if (siUnitAttribute != null) {
//            JumboUnitList parentList = this.getParentJumboUnitList();
//            JumboUnitList siUnitList = parentList.getSIUnitList();
//            if (siUnitList == null) {
//                NamespaceToUnitListMap unitListMap = this.getUnitListMap();
//                if (unitListMap != null) {
//                    siUnitList = parentList.getSIUnitList(unitListMap);
//                }
//            }
//            if (siUnitList == null) {
//                throw new RuntimeException("must set siUnitList in parent unitList");
//            }
//            siUnit = siUnitList.getUnit(siUnitAttribute.getIdRef());
//        }
        return siUnit;
    }

    /**
     * are unit attributes consistent with being SI. requires parentSI to point
     * to id and multiplier == 1.0
     *
     * @return true is all values not null and consistent
     */
    public boolean isSIUnit() {
        boolean isUnit = false;
        // FIXME
//        isUnit = this.getMultiplierToSIAttribute() != null;
//        if (isUnit) {
//            isUnit = (this.getMultiplierToSI() == 1.0);
//        }
//        if (isUnit) {
//            isUnit = false;
//            NamespaceRefAttribute parentSIAttribute = (NamespaceRefAttribute) this
//                    .getParentSIAttribute();
//            if (parentSIAttribute != null) {
//                String id = this.getId();
//                if (id != null && id.equals(parentSIAttribute.getIdRef())) {
//                    isUnit = true;
//                }
//            }
//        }
        return isUnit;
    }

    /** get unit type referenced from unit. may be directly referenced (by
     * unitType attribute) or indirectly by finding parentSI unit and then its
     * type
     *
     * @return the unitType
     */
    public JumboUnitType getJumboUnitType() {
        JumboUnitType unitType = null;
//        UnitTypeAttribute unitTypeAttribute =
//            (UnitTypeAttribute) this.getUnitTypeAttribute();
//        if (unitTypeAttribute == null) {
//            System.out.println("NO UNIT TYPE");
//            // cannot find unitType, find parentSI
//            JumboUnit parentSI = this.getSIUnit();
//            if (parentSI != null) {
//                try {
//                    unitType = parentSI.getJumboUnitType();
//                } catch (RuntimeException e) {
//                    if (e.getMessage().equals(NULL_UNIT_LIST_MAP)) {
//                        unitType = JumboUnitType.UNKNOWN_PARENT;
//                    }
//                }
//            }
//        } else {
//            NamespaceToUnitListMap unitListMap = null;
//            unitListMap = this.getUnitListMap();
//            if (unitListMap == null) {
//                throw new RuntimeException(NULL_UNIT_LIST_MAP);
//            }
//            unitType = (JumboUnitType) unitTypeAttribute.getEntry(unitListMap);
//        }
        return unitType;
    }

    /** gets the SIUnit. dereferences the parentSI unit.
     *
     * @return the unit
     */
    public JumboUnit getSIUnit() {
        JumboUnit siUnit = null;
//        ParentSIAttribute parentSIAttribute =
//            (ParentSIAttribute) this.getParentSIAttribute();
//        if (parentSIAttribute == null) {
//            throw new RuntimeException("Unit: " + this.getId()
//                    + " must have parentSI");
//        }
//        NamespaceToUnitListMap unitListMap = this.getUnitListMap();
//        if (unitListMap == null) {
//            throw new RuntimeException("Unit: " + this.getId()
//                    + " must have associated unitListMap");
//        }
//        siUnit = (JumboUnit) parentSIAttribute.getEntry(unitListMap);
        return siUnit;
    }

    /**
     * returns super.getPower(). enforces default value of 1.0 if attribute
     * missing.
     *
     * @return the power (default = 1.0)
     */
    public double getPower() {
    	return power;
    }

//    /**
//     * get mapping of namespaces onto unitLists.
//     *
//     * @return map
//     */
//    public NamespaceToUnitListMap getUnitListMap() {
//        if (unitListMap == null) {
//            JumboUnitList parentUnitList = this.getParentJumboUnitList();
//            unitListMap = parentUnitList.getUnitListMap();
////            for (String ss : unitListMap.keySet()) {
////                System.out.println("UNITLISTMAP_ITEM "+ss);
////            }
//        }
//        return unitListMap;
//    }
//
//    /**
//     * set the unitListMap. Be careful before using this to avoid
//     * incosnistencies. Currently required for unit composition.
//     *
//     * @param unitListMap
//     */
//    public void setUnitListMap(NamespaceToUnitListMap unitListMap) {
//        this.unitListMap = unitListMap;
//    }
//
//    /**
//     * get namespace for unit. Note: this is the unit namespace, not the XML
//     * element namespace (which will be CML). It is normally obtained from the
//     * namespace prefix or from the dictionary in which the unit occurs.
//     *
//     * @return the namespace
//     */
//    public String getNamespace() {
//        String namespace = null;
//        JumboUnitList parentUnitList = this.getParentJumboUnitList();
//        if (parentUnitList != null) {
//            namespace = parentUnitList.getNamespace();
//        }
//        return namespace;
//    }

//    /**
//     * set this as units on elements which can have them. overrides any existing
//     * units
//     *
//     * @param element
//     *            to set the units on
//     */
//    public void setUnitsOn(HasUnits element) {
//        String namespaceURI = this.getNamespace();
//        String prefix = ((CMLElement) element).getPrefixForNamespace(namespaceURI);
//        element.setUnits(prefix, this.getId(), namespaceURI);
//    }

//    /**
//     * computes new unit from child units.
//     *
//     * <unit id="a.b"> <unit units="units:u1" power="2"/> <unit units="units:u2"
//     * power="-1"/> </unit>
//     *
//     * @param unitListMap
//     * @param addUnitType if true, add the new unitType as child
//     */
//    public void computeUnit(NamespaceToUnitListMap unitListMap, boolean addUnitType) {
//        CMLElements<JumboUnit> childUnits = this.getUnitElements();
//        // get any multiplier on the unit
//        double multiplier = (this.getMultiplierToDataAttribute() != null) ? this
//                .getMultiplierToData()
//                : 1.0;
//        JumboUnitType newUnitType = new JumboUnitType();
//        newUnitType.setParentSI("siUnitType:unknown");
//        // iterate through child units which define the new unit
//        for (JumboUnit childUnit : childUnits) {
//            UnitsAttribute unitAttribute = (UnitsAttribute) childUnit
//                    .getUnitsAttribute();
//            JumboUnit uuu = unitListMap.getUnit(unitAttribute);
//            if (uuu == null) {
//                throw new RuntimeException("Cannot find unit: " + unitAttribute);
//            }
//            JumboUnit unitUnit = new JumboUnit(uuu);
//            // we have to add the new units so they have a context
//            // we remove them later
//            this.appendChild(unitUnit);
//            unitUnit.setPower(childUnit.getPower());
//            unitUnit.setUnitListMap(unitListMap);
//            if (unitUnit.getMultiplierToSIAttribute() != null) {
//                double mult = unitUnit.getMultiplierToSI();
//                double pp = unitUnit.getPower();
//                int power = (int) Math.round(pp);
//                for (int p = power; p > 0; p--) {
//                    multiplier *= mult;
//                }
//                for (int p = power; p < 0; p++) {
//                    multiplier /= mult;
//                }
//                JumboUnitType childUnitType = unitUnit.getJumboUnitType();
//                if (childUnitType != null) {
//                    CMLElements<JumboDimension> childDimensions = childUnitType
//                            .getDimensionElements();
//                    for (JumboDimension childDimension : childDimensions) {
//                        newUnitType
//                                .composeDimensionsFrom(childDimension, power);
//                    }
//                } else {
//                    throw new RuntimeException("CANNOT FIND UNIT TYPE "
//                            + unitUnit.getId());
//                }
//            }
//            unitUnit.detach();
//        }
//        if (addUnitType) {
//            if (this.getUnitTypeElements().size() != 0) {
//                throw new RuntimeException("unit already has unitType child");
//            }
//            this.appendChild(newUnitType);
//        }
//        this.setMultiplierToSI(multiplier);
//    }

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String getAbbreviation() {
		return abbreviation;
	}

	public void setAbbreviation(String abbreviation) {
		this.abbreviation = abbreviation;
	}

	public String getSymbol() {
		return symbol;
	}

	public void setSymbol(String symbol) {
		this.symbol = symbol;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public double getMultiplierToSI() {
		return multiplierToSI;
	}

	public void setMultiplierToSI(double multiplierToSI) {
		this.multiplierToSI = multiplierToSI;
	}

	public double getConstantToSI() {
		return constantToSI;
	}

	public void setConstantToSI(double constantToSI) {
		this.constantToSI = constantToSI;
	}

	public void setId(String id) {
		this.id = id;
	}
}
